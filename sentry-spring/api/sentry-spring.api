public final class io/sentry/spring/BuildConfig {
	public static final field SENTRY_SPRING_SDK_NAME Ljava/lang/String;
	public static final field VERSION_NAME Ljava/lang/String;
}

public abstract interface annotation class io/sentry/spring/EnableSentry : java/lang/annotation/Annotation {
	public abstract fun dsn ()Ljava/lang/String;
	public abstract fun exceptionResolverOrder ()I
	public abstract fun sendDefaultPii ()Z
}

public final class io/sentry/spring/HttpServletRequestSentryUserProvider : io/sentry/spring/SentryUserProvider {
	public fun <init> (Lio/sentry/SentryOptions;)V
	public fun provideUser ()Lio/sentry/protocol/User;
}

public class io/sentry/spring/SentryExceptionResolver : org/springframework/core/Ordered, org/springframework/web/servlet/HandlerExceptionResolver {
	public fun <init> (Lio/sentry/IHub;I)V
	public fun getOrder ()I
	public fun resolveException (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/lang/Object;Ljava/lang/Exception;)Lorg/springframework/web/servlet/ModelAndView;
}

public class io/sentry/spring/SentryHubRegistrar : org/springframework/context/annotation/ImportBeanDefinitionRegistrar {
	public fun <init> ()V
	public fun registerBeanDefinitions (Lorg/springframework/core/type/AnnotationMetadata;Lorg/springframework/beans/factory/support/BeanDefinitionRegistry;)V
}

public class io/sentry/spring/SentryInitBeanPostProcessor : org/springframework/beans/factory/config/BeanPostProcessor, org/springframework/context/ApplicationContextAware {
	public fun <init> ()V
	public fun postProcessAfterInitialization (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
	public fun setApplicationContext (Lorg/springframework/context/ApplicationContext;)V
}

public class io/sentry/spring/SentryRequestHttpServletRequestProcessor : io/sentry/EventProcessor {
	public fun <init> (Ljavax/servlet/http/HttpServletRequest;Lio/sentry/spring/SentryRequestResolver;)V
	public fun process (Lio/sentry/SentryEvent;Ljava/lang/Object;)Lio/sentry/SentryEvent;
}

public class io/sentry/spring/SentryRequestResolver {
	public fun <init> (Lio/sentry/SentryOptions;)V
	public fun resolveSentryRequest (Ljavax/servlet/http/HttpServletRequest;)Lio/sentry/protocol/Request;
}

public class io/sentry/spring/SentrySpringRequestListener : javax/servlet/ServletRequestListener, org/springframework/core/Ordered {
	public fun <init> (Lio/sentry/IHub;Lio/sentry/spring/SentryRequestResolver;)V
	public fun getOrder ()I
	public fun requestDestroyed (Ljavax/servlet/ServletRequestEvent;)V
	public fun requestInitialized (Ljavax/servlet/ServletRequestEvent;)V
}

public abstract interface class io/sentry/spring/SentryUserProvider {
	public abstract fun provideUser ()Lio/sentry/protocol/User;
}

public final class io/sentry/spring/SentryUserProviderEventProcessor : io/sentry/EventProcessor {
	public fun <init> (Lio/sentry/spring/SentryUserProvider;)V
	public fun getSentryUserProvider ()Lio/sentry/spring/SentryUserProvider;
	public fun process (Lio/sentry/SentryEvent;Ljava/lang/Object;)Lio/sentry/SentryEvent;
}

public class io/sentry/spring/SentryWebConfiguration {
	public fun <init> ()V
	public fun httpServletRequestSentryUserProvider (Lio/sentry/SentryOptions;)Lio/sentry/spring/HttpServletRequestSentryUserProvider;
	public fun sentryRequestResolver (Lio/sentry/SentryOptions;)Lio/sentry/spring/SentryRequestResolver;
	public fun sentrySpringRequestListener (Lio/sentry/IHub;Lio/sentry/spring/SentryRequestResolver;)Lio/sentry/spring/SentrySpringRequestListener;
}

public final class io/sentry/spring/common/CaptureHelper {
	public fun <init> ()V
	public static fun captureUnhandled (Lio/sentry/IHub;Ljava/lang/Throwable;)V
}

public class io/sentry/spring/common/SentryConfiguration : org/springframework/context/annotation/ImportBeanDefinitionRegistrar {
	public fun <init> (Lorg/springframework/core/env/Environment;)V
	public fun registerBeanDefinitions (Lorg/springframework/core/type/AnnotationMetadata;Lorg/springframework/beans/factory/support/BeanDefinitionRegistry;)V
}

public class io/sentry/spring/reactive/SentryReactiveExceptionHandler : org/springframework/core/Ordered, org/springframework/web/server/WebExceptionHandler {
	public fun <init> ()V
	public fun getOrder ()I
	public fun handle (Lorg/springframework/web/server/ServerWebExchange;Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
}

public class io/sentry/spring/reactive/SentryReactiveHubAdapter {
	public fun <init> (Lio/sentry/IHub;Ljava/util/List;Lorg/springframework/web/server/ServerWebExchange;)V
	public fun captureWith (Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
	public fun getHub ()Lio/sentry/IHub;
}

public final class io/sentry/spring/reactive/SentryReactiveHubContextHolder {
	public fun <init> ()V
	public static fun getHubContext ()Lreactor/core/publisher/Mono;
}

public abstract interface class io/sentry/spring/reactive/SentryReactiveUserProvider {
	public abstract fun provideUser (Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
}

public class io/sentry/spring/reactive/SentryReactiveWebFilter : org/springframework/core/Ordered, org/springframework/web/server/WebFilter {
	public fun <init> (Lio/sentry/IHub;Lio/sentry/SentryOptions;Ljava/util/List;)V
	public fun filter (Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/web/server/WebFilterChain;)Lreactor/core/publisher/Mono;
	public fun getOrder ()I
}

public final class io/sentry/spring/reactive/SentryReactiveWebHelper {
	public fun <init> ()V
	public static fun captureWithRequestHub (Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
	public static fun captureWithRequestHub (Lorg/springframework/web/server/ServerWebExchange;Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
	public static fun getSentryReactiveHubAdapter (Lorg/springframework/web/server/ServerWebExchange;)Lio/sentry/spring/reactive/SentryReactiveHubAdapter;
}

public class io/sentry/spring/reactive/SentryReactiveWebRequestProcessor : io/sentry/EventProcessor {
	public fun <init> (Lorg/springframework/http/server/reactive/ServerHttpRequest;Lio/sentry/SentryOptions;)V
	public fun process (Lio/sentry/SentryEvent;Ljava/lang/Object;)Lio/sentry/SentryEvent;
}

public class io/sentry/spring/reactive/SentryWebFluxConfiguration {
	public fun <init> ()V
	public fun sentryReactiveErrorAttributes ()Lio/sentry/spring/reactive/SentryReactiveExceptionHandler;
	public fun sentryReactiveWebFilter (Lio/sentry/IHub;Lio/sentry/SentryOptions;Ljava/util/List;)Lio/sentry/spring/reactive/SentryReactiveWebFilter;
	public fun webfluxRequestSentryUserProvider (Lio/sentry/SentryOptions;)Lio/sentry/spring/reactive/WebfluxRequestSentryUserProvider;
}

public final class io/sentry/spring/reactive/WebfluxRequestSentryUserProvider : io/sentry/spring/reactive/SentryReactiveUserProvider {
	public static final field USER_ATTR Ljava/lang/String;
	public fun <init> (Lio/sentry/SentryOptions;)V
	public fun provideUser (Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
}

public abstract interface annotation class io/sentry/spring/tracing/SentrySpan : java/lang/annotation/Annotation {
	public abstract fun description ()Ljava/lang/String;
	public abstract fun op ()Ljava/lang/String;
	public abstract fun value ()Ljava/lang/String;
}

public class io/sentry/spring/tracing/SentrySpanAdvice : org/aopalliance/intercept/MethodInterceptor {
	public fun <init> (Lio/sentry/IHub;)V
	public fun invoke (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
}

public class io/sentry/spring/tracing/SentryTracingFilter : org/springframework/web/filter/OncePerRequestFilter {
	public fun <init> (Lio/sentry/IHub;Lio/sentry/SentryOptions;Lio/sentry/spring/SentryRequestResolver;)V
	protected fun doFilterInternal (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljavax/servlet/FilterChain;)V
}

public abstract interface annotation class io/sentry/spring/tracing/SentryTransaction : java/lang/annotation/Annotation {
	public abstract fun name ()Ljava/lang/String;
	public abstract fun op ()Ljava/lang/String;
	public abstract fun value ()Ljava/lang/String;
}

public class io/sentry/spring/tracing/SentryTransactionAdvice : org/aopalliance/intercept/MethodInterceptor {
	public fun <init> (Lio/sentry/IHub;)V
	public fun invoke (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
}

public final class io/sentry/spring/tracing/TransactionNameProvider {
	public fun <init> ()V
	public fun provideTransactionName (Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;
}

